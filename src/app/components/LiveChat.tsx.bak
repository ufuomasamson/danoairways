"use client";

import { useEffect, useRef, useState } from 'react';
import { supabase } from '../../supabaseClient';
import { useSession } from '../hooks/useSession';


export default function LiveChat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(true);
  const [open, setOpen] = useState(false);
  const [error, setError] = useState('');
  const messagesEndRef = useRef(null);
  const session = useSession();

  useEffect(() => {
    if (!session || !session.user?.id) {
      console.log('LiveChat: No session or user ID found', { session });
      return;
    }
    
    console.log('LiveChat: Setting up chat for user', session.user.id);
    let subscription;
    
    async function fetchMessages() {
      setLoading(true);
      setError('');
      console.log('LiveChat: Fetching messages for user', session.user.id);
      
      // Try both user_id and user_auth_id fields to handle migration
      const { data: dataUserId, error: errorUserId } = await supabase
        .from('chats')
        .select('*')
        .eq('user_id', session.user.id)
        .order('created_at', { ascending: true });

      if (!errorUserId && dataUserId?.length > 0) {
        console.log('LiveChat: Found messages using user_id field', dataUserId);
        setMessages(dataUserId);
        setLoading(false);
        return;
      }

      // Try with user_auth_id field
      const { data: dataAuthId, error: errorAuthId } = await supabase
        .from('chats')
        .select('*')
        .eq('user_auth_id', session.user.id)
        .order('created_at', { ascending: true });

      if (!errorAuthId) {
        console.log('LiveChat: Found messages using user_auth_id field', dataAuthId);
        setMessages(dataAuthId || []);
      } else {
        console.error('LiveChat: Error fetching messages', { errorUserId, errorAuthId });
        setError('Failed to load messages: ' + (errorAuthId.message || 'Unknown error'));
      }
      setLoading(false);
    }
    
    fetchMessages();
    
    // Set up real-time subscription
    subscription = supabase
      .channel('public:chats')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'chats'
      }, (payload) => {
        console.log('LiveChat: Real-time update received', payload);
        if (payload.eventType === 'INSERT') {
          // Check if this message belongs to current user
          const newMessage = payload.new;
          if (newMessage.user_id === session.user.id || newMessage.user_auth_id === session.user.id) {
            setMessages((prev) => [...prev, newMessage]);
          }
        } else {
          fetchMessages();
        }
      })
      .subscribe((status) => {
        console.log('LiveChat: Subscription status', status);
      });
      
    return () => {
      if (subscription) {
        console.log('LiveChat: Cleaning up subscription');
        supabase.removeChannel(subscription);
      }
    };
  }, [session]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = async (e) => {
  const sendMessage = async (e) => {
    e.preventDefault();
    setError('');
    if (!input.trim()) return;
    if (!session || !session.user?.id) {
      setError('User session not found. Please log in again.');
      console.error('LiveChat: No session or user ID for sending message');
      return;
    }

    console.log('LiveChat: Attempting to send message', {
      userId: session.user.id,
      message: input.trim()
    });

    // Try API route first to avoid RLS issues
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_auth_id: session.user.id, // Use auth_id for new structure
          sender_role: 'user',
          message: input.trim(),
        }),
      });

      const result = await response.json();
      console.log('LiveChat: API response', { response: response.ok, result });
      
      if (!response.ok) {
        console.error('LiveChat: API error', result);
        setError('Failed to send message: ' + (result.error || 'Unknown error'));
        return;
      }

      console.log('LiveChat: Message sent successfully via API');
      setMessages((prev) => [...prev, result.message]);
      setInput('');
      return;
    } catch (apiError) {
      console.error('LiveChat: API network error', apiError);
      setError('Failed to send message: Network error');
      return;
    }
  };

  if (!session) {
    console.log('LiveChat: No session found, but showing button anyway for debugging');
    // return null; // Temporarily commented out for debugging
  }

  return (
    <>
      <button
        className="fixed bottom-6 right-6 z-50 bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg hover:bg-blue-700 focus:outline-none"
        style={{ display: open ? 'none' : 'flex' }}
        onClick={() => setOpen(true)}
        aria-label="Open Live Chat"
      >
        <svg width="28" height="28" fill="none" viewBox="0 0 24 24"><path d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14l4-4h12a2 2 0 0 0 2-2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
      </button>
      {open && (
        <div className="fixed bottom-6 right-6 z-50">
          <div className="bg-white shadow-lg rounded-lg w-80 h-96 flex flex-col">
            <div className="p-3 border-b font-bold flex justify-between items-center text-black">
              <span>Live Chat</span>
              <button onClick={() => setOpen(false)} className="text-gray-500 hover:text-gray-700">âœ•</button>
            </div>
            <div className="flex-1 overflow-y-auto p-3 text-black" style={{ background: '#f8fafc' }}>
              {error && <div className="mb-2 text-red-600 text-sm">{error}</div>}
              {loading ? (
                <div>Loading...</div>
              ) : (
                messages.map((msg) => (
                  <div key={msg.id} className={`mb-2 ${msg.sender_role === 'user' ? 'text-right' : 'text-left'}`}>
                    <span className={`inline-block px-2 py-1 rounded ${msg.sender_role === 'user' ? 'bg-blue-100 text-blue-900' : 'bg-gray-200 text-gray-900'}`}>{msg.message}</span>
                  </div>
                ))
              )}
              <div ref={messagesEndRef} />
            </div>
            <form onSubmit={sendMessage} className="p-3 border-t flex bg-white">
              <input
                className="flex-1 border rounded px-2 py-1 mr-2 text-gray-900 bg-white"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Type a message..."
                style={{ background: '#fff' }}
              />
              <button type="submit" className="bg-blue-500 text-white px-3 py-1 rounded">Send</button>
            </form>
          </div>
        </div>
      )}
    </>
  );
}
